'This library helps with the use of the 2002 Call wrapper, Shop Floor Control Tasks (JB0028). To use it, simply fill out the 2002 datatable with the data for a single call to the call wrapper for each row.
'Then call either 2002Sync or 2002Async to have the call wrapper run on each row.
'The datatable is structed as follows:
'Column		=	Parameter				=	Possible Values
'================================================================================================================
'CompCode	=	Company Code			=	CCC - defaults to currently logged in user's company code
'Type		=	Type					=	"W" - Workorders
'										=	"S" - Single Job
'BegWO		=	Beginning Work Order	=	######
'BegSuf		=	Beginning Suffix		=	###
'EndWO		=	Ending Work Order		=	######
'EndSuf		=	Ending Suffix			=	###
'Term		=	Terminal				=	TTT - defaults to currently logged in user's terminal number
'================================================================================================================
Program.Sub.Preflight.Start
V.Global.s2002Error.Declare(String)
F.Data.DataTable.Create("2002",True)
F.Data.DataTable.AddColumn("2002","CompCode","String",V.Caller.CompanyCode)
F.Data.DataTable.AddColumn("2002","Type","String")
F.Data.DataTable.AddColumn("2002","BegWO","String")
F.Data.DataTable.AddColumn("2002","BegSuf","String")
F.Data.DataTable.AddColumn("2002","EndWO","String")
F.Data.DataTable.AddColumn("2002","EndSuf","String")
F.Data.DataTable.AddColumn("2002","Term","String",V.Caller.Terminal)
Program.Sub.Preflight.End

Program.Sub.2002.Start
F.Intrinsic.Control.Try
	V.Local.sParams.Declare(String)
	V.Local.iCount.Declare(Long,-1)
	
	'For each row in the datatable: concat needed parameters then call the callwrapper according to how the programmer called
	F.Intrinsic.Control.For(V.Local.iCount,0,V.DataTable.2002.RowCount--,1)
		F.Intrinsic.String.ConcatCallWrapperArgs(V.DataTable.2002(V.Local.iCount).CompCode!FieldVal,V.DataTable.2002(V.Local.iCount).Type!FieldVal,V.DataTable.2002(V.Local.iCount).BegWO!FieldVal,V.DataTable.2002(V.Local.iCount).BegSuf!FieldVal,V.DataTable.2002(V.Local.iCount).EndWO!FieldVal,V.DataTable.2002(V.Local.iCount).EndSuf!FieldVal,V.DataTable.2002(V.Local.iCount).Term!FieldVal,V.Local.sParams)
		
		F.Intrinsic.Control.SelectCase(V.Args.CallWrapperType)
			F.Intrinsic.Control.Case(0)
				F.Global.General.CallWrapperSync(2002,V.Local.sParams)
			F.Intrinsic.Control.Case(1)
				F.Global.General.CallWrapperAsync(2002,V.Local.sParams)
		F.Intrinsic.Control.EndSelect
	F.Intrinsic.Control.Next(V.Local.iCount)
	
	F.Data.DataTable.DeleteRow("2002")
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(CatchError2002,"Sub",V.Ambient.CurrentSubroutine,"ErrNo",V.Ambient.ErrorNumber,"ErrDesc",V.Ambient.ErrorDescription,"Row",V.Local.iCount)
F.Intrinsic.Control.EndTry
Program.Sub.2002.End

'Calls 2002 with callwrapper type of 0. Passes existance of Test argument if it is provided.
Program.Sub.2002Sync.Start
F.Intrinsic.Control.Try
	F.Intrinsic.Control.CallSub(2002,"CallWrapperType",0)
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(CatchError2002,"Sub",V.Ambient.CurrentSubroutine,"ErrNo",V.Ambient.ErrorNumber,"ErrDesc",V.Ambient.ErrorDescription,"Row",-2)
F.Intrinsic.Control.EndTry
Program.Sub.2002Sync.End

'Calls 2002 with callwrapper type of 1. Passes existance of Test argument if it is provided.
Program.Sub.2002Async.Start
F.Intrinsic.Control.Try
	F.Intrinsic.Control.CallSub(2002,"CallWrapperType",1)
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(CatchError2002,"Sub",V.Ambient.CurrentSubroutine,"ErrNo",V.Ambient.ErrorNumber,"ErrDesc",V.Ambient.ErrorDescription,"Row",-2)
F.Intrinsic.Control.EndTry
Program.Sub.2002Async.End

Program.Sub.CatchError2002.Start
V.Local.iActualRow.Declare(Long)
F.Intrinsic.Math.Add(V.Args.Row,1,V.Local.iActualRow)
F.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}", V.Args.Sub, V.Args.ErrNo, V.Args.ErrDesc,V.Local.iActualRow, V.Global.s2002Error)
Program.Sub.CatchError2002.End