'This library helps with the use of the 1000 Call wrapper, Fix BOM calls REBLDALL (*PROGRAM*). To use it, simply fill out the 1000 datatable with the data for a single call to the call wrapper for each row.
'Then call either 1000Sync or 1000Async to have the call wrapper run on each row.
'The datatable is structed as follows:
'Column		=	Parameter		=	Possible Values
'================================================================================================================
'CompCode	=	Company Code	=	CCC - defaults to currently logged in user's company code
'================================================================================================================
Program.Sub.Preflight.Start
V.Global.s1000Error.Declare(String)
F.Data.DataTable.Create("1000",True)
F.Data.DataTable.AddColumn("1000","CompCode","String",V.Caller.CompanyCode)
Program.Sub.Preflight.End

Program.Sub.1000.Start
F.Intrinsic.Control.Try
	V.Local.sParams.Declare(String)
	V.Local.iCount.Declare(Long,-1)
	'For each row in the datatable: concat needed parameters then call the callwrapper according to how the programmer called
	F.Intrinsic.Control.For(V.Local.iCount,0,V.DataTable.1000.RowCount--,1)
		V.Local.sParams.Set(V.DataTable.1000(V.Local.iCount).CompCode!FieldVal)
		
		F.Intrinsic.Control.SelectCase(V.Args.CallWrapperType)
			F.Intrinsic.Control.Case(0)
				F.Global.General.CallWrapperSync(1000,V.Local.sParams)
			F.Intrinsic.Control.Case(1)
				F.Global.General.CallWrapperAsync(1000,V.Local.sParams)
		F.Intrinsic.Control.EndSelect
	F.Intrinsic.Control.Next(V.Local.iCount)
	
	F.Data.DataTable.DeleteRow("1000")
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(CatchError1000,V.Ambient.CurrentSubroutine, "ErrNo", V.Ambient.ErrorNumber, "ErrDesc", V.Ambient.ErrorDescription,"Row",V.Local.iCount)
F.Intrinsic.Control.EndTry
Program.Sub.1000.End

'Calls 1000 with callwrapper type of 0. Passes existance of Test argument if it is provided.
Program.Sub.1000Sync.Start
F.Intrinsic.Control.Try
	F.Intrinsic.Control.CallSub(1000,"CallWrapperType",0)
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(CatchError1000,V.Ambient.CurrentSubroutine, "ErrNo", V.Ambient.ErrorNumber, "ErrDesc", V.Ambient.ErrorDescription,"Row",-2)
F.Intrinsic.Control.EndTry
Program.Sub.1000Sync.End

'Calls 1000 with callwrapper type of 1. Passes existance of Test argument if it is provided.
Program.Sub.1000Async.Start
F.Intrinsic.Control.Try
	F.Intrinsic.Control.CallSub(1000,"CallWrapperType",1)
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(CatchError1000,"Sub",V.Ambient.CurrentSubroutine, "ErrNo", V.Ambient.ErrorNumber, "ErrDesc", V.Ambient.ErrorDescription,"Row",-2)
F.Intrinsic.Control.EndTry
Program.Sub.1000Async.End

Program.Sub.CatchError1000.Start
V.Local.iActualRow.Declare(Long)
F.Intrinsic.Math.Add(V.Args.Row,1,V.Local.iActualRow)
F.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}", V.Args.Sub, V.Args.ErrNo, V.Args.ErrDesc,V.Local.iActualRow, V.Global.s1000Error)
Program.Sub.CatchError1000.End